@page "/"
@using System.Drawing
@using System.Drawing.Imaging

<div @ref="divCanvas">
    <BECanvas @ref="_canvasReference" Height="600" Width="800"></BECanvas>
</div>

<span>@frameTime</span>

@code {
    ElementReference divCanvas;
    protected BECanvasComponent _canvasReference;
    protected WebGLContext _context;
    int frameTime = 0;
    DateTime lastFrame;
    bool textureMapping = true;

    float cubeRotation = 0.0f;

    string vsSourceColour = @"
    attribute vec4 aVertexPosition;
    attribute vec3 aVertexNormal;
    attribute vec4 aVertexColour;

    uniform mat4 uNormalMatrix;
    uniform mat4 uModelViewMatrix;
    uniform mat4 uProjectionMatrix;

    varying lowp vec4 vColour;
    varying highp vec3 vLighting;

    void main(void) {
      gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;
      vColour = aVertexColour;

      highp vec3 ambientLight = vec3(0.3, 0.3, 0.3);
      highp vec3 directionalLightColor = vec3(1, 1, 1);
      highp vec3 directionalVector = normalize(vec3(0.85, 0.8, 0.75));

      highp vec4 transformedNormal = uNormalMatrix * vec4(aVertexNormal, 1.0);

      highp float directional = max(dot(transformedNormal.xyz, directionalVector), 0.0);
      vLighting = ambientLight + (directionalLightColor * directional);
    }
    ";

    string vsSourceTexture = @"
    attribute vec4 aVertexPosition;
    attribute vec3 aVertexNormal;
    attribute vec2 aTextureCoord;

    uniform mat4 uNormalMatrix;
    uniform mat4 uModelViewMatrix;
    uniform mat4 uProjectionMatrix;

    varying highp vec2 vTextureCoord;
    varying highp vec3 vLighting;

    void main(void) {
      gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;
      vTextureCoord = aTextureCoord;

      highp vec3 ambientLight = vec3(0.3, 0.3, 0.3);
      highp vec3 directionalLightColor = vec3(1, 1, 1);
      highp vec3 directionalVector = normalize(vec3(0.85, 0.8, 0.75));

      highp vec4 transformedNormal = uNormalMatrix * vec4(aVertexNormal, 1.0);

      highp float directional = max(dot(transformedNormal.xyz, directionalVector), 0.0);
      vLighting = ambientLight + (directionalLightColor * directional);
    }
    ";

    string fsSourceColour = @"
    varying lowp vec4 vColour;
    varying highp vec3 vLighting;

    void main(void) {
      gl_FragColor = vec4(vColour.rgb * vLighting, vColour.a);
    }
    ";

    string fsSourceTexture = @"
    varying highp vec2 vTextureCoord;
    varying highp vec3 vLighting;

    uniform sampler2D uSampler;

    void main(void) {
      highp vec4 texelColour = texture2D(uSampler, vTextureCoord);
      gl_FragColor = vec4(texelColour.rgb * vLighting, texelColour.a);
    }
    ";

    protected async Task<WebGLShader> LoadShader(ShaderType type, string source)
    {
        var shader = await _context.CreateShaderAsync(type);
        await _context.ShaderSourceAsync(shader, source);
        await _context.CompileShaderAsync(shader);

        bool status = await _context.GetShaderParameterAsync<bool>(shader, ShaderParameter.COMPILE_STATUS);
        if (status == false)
        {
            throw new Exception(await _context.GetShaderInfoLogAsync(shader));
        }

        return shader;
    }

    protected async Task<WebGLProgram> InitShaderProgram()
    {
        var shaderProgram = await _context.CreateProgramAsync();

        if (textureMapping)
        {
            var vertexShader = await LoadShader(ShaderType.VERTEX_SHADER, vsSourceTexture);
            var fragmentShader = await LoadShader(ShaderType.FRAGMENT_SHADER, fsSourceTexture);
            await _context.AttachShaderAsync(shaderProgram, vertexShader);
            await _context.AttachShaderAsync(shaderProgram, fragmentShader);
        }
        else
        {
            var vertexShader = await LoadShader(ShaderType.VERTEX_SHADER, vsSourceColour);
            var fragmentShader = await LoadShader(ShaderType.FRAGMENT_SHADER, fsSourceColour);
            await _context.AttachShaderAsync(shaderProgram, vertexShader);
            await _context.AttachShaderAsync(shaderProgram, fragmentShader);
        }

        await _context.LinkProgramAsync(shaderProgram);

        bool status = await _context.GetProgramParameterAsync<bool>(shaderProgram, ProgramParameter.LINK_STATUS);
        if (status == false)
        {
            throw new Exception(await _context.GetProgramInfoLogAsync(shaderProgram));
        }

        return shaderProgram;
    }

    protected async Task<WebGLBuffer> InitNormalBuffer()
    {
        var normalBuffer = await _context.CreateBufferAsync();
        await _context.BindBufferAsync(BufferType.ARRAY_BUFFER, normalBuffer);

        float[] normals = new float[] { 
            0.0f,  0.0f,  1.0f,
            0.0f,  0.0f,  1.0f,
            0.0f,  0.0f,  1.0f,
            0.0f,  0.0f,  1.0f,

            // Back
            0.0f,  0.0f, -1.0f,
            0.0f,  0.0f, -1.0f,
            0.0f,  0.0f, -1.0f,
            0.0f,  0.0f, -1.0f,

            // Top
            0.0f,  1.0f,  0.0f,
            0.0f,  1.0f,  0.0f,
            0.0f,  1.0f,  0.0f,
            0.0f,  1.0f,  0.0f,

            // Bottom
            0.0f, -1.0f,  0.0f,
            0.0f, -1.0f,  0.0f,
            0.0f, -1.0f,  0.0f,
            0.0f, -1.0f,  0.0f,

            // Right
            1.0f,  0.0f,  0.0f,
            1.0f,  0.0f,  0.0f,
            1.0f,  0.0f,  0.0f,
            1.0f,  0.0f,  0.0f,

            // Left
            -1.0f,  0.0f,  0.0f,
            -1.0f,  0.0f,  0.0f,
            -1.0f,  0.0f,  0.0f,
            -1.0f,  0.0f,  0.0f
        };

        await _context.BufferDataAsync<float>(BufferType.ARRAY_BUFFER, normals, BufferUsageHint.STATIC_DRAW);

        return normalBuffer;
    }

    protected async Task<WebGLBuffer> InitIndexBuffer()
    {
        var indexBuffer = await _context.CreateBufferAsync();
        await _context.BindBufferAsync(BufferType.ELEMENT_ARRAY_BUFFER, indexBuffer);

        ushort[] indices = new ushort[] {
            0,  1,  2,      0,  2,  3,    // front
            4,  5,  6,      4,  6,  7,    // back
            8,  9,  10,     8,  10, 11,   // top
            12, 13, 14,     12, 14, 15,   // bottom
            16, 17, 18,     16, 18, 19,   // right
            20, 21, 22,     20, 22, 23    // left
        };

        await _context.BufferDataAsync<ushort>(BufferType.ELEMENT_ARRAY_BUFFER, indices, BufferUsageHint.STATIC_DRAW);

        return indexBuffer;
    }

    protected async Task<WebGLBuffer> InitPositionBuffer()
    {
        var positionBuffer = await _context.CreateBufferAsync();
        await _context.BindBufferAsync(BufferType.ARRAY_BUFFER, positionBuffer);

        float[] positions = new float[] {
            // Front face
            -1.0f, -1.0f,  1.0f,
            1.0f, -1.0f,  1.0f,
            1.0f,  1.0f,  1.0f,
            -1.0f,  1.0f,  1.0f,

            // Back face
            -1.0f, -1.0f, -1.0f,
            -1.0f,  1.0f, -1.0f,
            1.0f,  1.0f, -1.0f,
            1.0f, -1.0f, -1.0f,

            // Top face
            -1.0f,  1.0f, -1.0f,
            -1.0f,  1.0f,  1.0f,
            1.0f,  1.0f,  1.0f,
            1.0f,  1.0f, -1.0f,

            // Bottom face
            -1.0f, -1.0f, -1.0f,
            1.0f, -1.0f, -1.0f,
            1.0f, -1.0f,  1.0f,
            -1.0f, -1.0f,  1.0f,

            // Right face
            1.0f, -1.0f, -1.0f,
            1.0f,  1.0f, -1.0f,
            1.0f,  1.0f,  1.0f,
            1.0f, -1.0f,  1.0f,

            // Left face
            -1.0f, -1.0f, -1.0f,
            -1.0f, -1.0f,  1.0f,
            -1.0f,  1.0f,  1.0f,
            -1.0f,  1.0f, -1.0f
        };

        await _context.BufferDataAsync<float>(BufferType.ARRAY_BUFFER, positions, BufferUsageHint.STATIC_DRAW);

        return positionBuffer;
    }

    protected async Task<WebGLBuffer> InitColourBuffer()
    {
        float[] faceColours = new float[] 
        {
            1.0f, 1.0f, 1.0f, 1.0f, // white
            1.0f, 0.0f, 0.0f, 1.0f, // red
            0.0f, 1.0f, 0.0f, 1.0f, // green
            0.0f, 0.0f, 1.0f, 1.0f, // blue
            1.0f, 1.0f, 0.0f, 1.0f, // yellow
            1.0f, 0.0f, 1.0f, 1.0f  // magenta
        };

        float[] colours = new float[24 * 4];
        int c = 0;
        for (int i = 0; i < 6; i++)
        {
            for (int j = 0; j < 4; j++)
            {
                colours[c++] = faceColours[i * 4 + 0];
                colours[c++] = faceColours[i * 4 + 1];
                colours[c++] = faceColours[i * 4 + 2];
                colours[c++] = faceColours[i * 4 + 3];
            }
        }

        var colourBuffer = await _context.CreateBufferAsync();
        await _context.BindBufferAsync(BufferType.ARRAY_BUFFER, colourBuffer);
        await _context.BufferDataAsync<float>(BufferType.ARRAY_BUFFER, colours, BufferUsageHint.STATIC_DRAW);
        return colourBuffer;
    }

    protected async Task<WebGLBuffer> InitTextureBuffer()
    {
        float[] textureCoordinates = new float[]
        {
            // Front
            0.0f,  0.0f,
            1.0f,  0.0f,
            1.0f,  1.0f,
            0.0f,  1.0f,
            // Back
            0.0f,  0.0f,
            1.0f,  0.0f,
            1.0f,  1.0f,
            0.0f,  1.0f,
            // Top
            0.0f,  0.0f,
            1.0f,  0.0f,
            1.0f,  1.0f,
            0.0f,  1.0f,
            // Bottom
            0.0f,  0.0f,
            1.0f,  0.0f,
            1.0f,  1.0f,
            0.0f,  1.0f,
            // Right
            0.0f,  0.0f,
            1.0f,  0.0f,
            1.0f,  1.0f,
            0.0f,  1.0f,
            // Left
            0.0f,  0.0f,
            1.0f,  0.0f,
            1.0f,  1.0f,
            0.0f,  1.0f
        };

        var textureBuffer = await _context.CreateBufferAsync();
        await _context.BindBufferAsync(BufferType.ARRAY_BUFFER, textureBuffer);
        await _context.BufferDataAsync<float>(BufferType.ARRAY_BUFFER, textureCoordinates, BufferUsageHint.STATIC_DRAW);

        return textureBuffer;
    }

    WebGLProgram shaderProgram;
    WebGLBuffer colourBuffer;
    WebGLBuffer textureBuffer;
    WebGLBuffer positionBuffer;
    WebGLBuffer indexBuffer;
    WebGLBuffer normalBuffer;
    WebGLTexture texture;
    uint vertexPosition;
    uint vertexColour;
    uint textureCoord;
    uint vertexNormal;
    WebGLUniformLocation projectionMatrixLocation;
    WebGLUniformLocation modelViewMatrixLocation;
    WebGLUniformLocation normalMatrixLocation;
    WebGLUniformLocation samplerLocation;

    protected async Task<WebGLTexture> LoadTexture()
    {
        WebGLTexture texture = await _context.CreateTextureAsync();
        await _context.BindTextureAsync(TextureType.TEXTURE_2D, texture);

        Image bmp = Bitmap.FromFile(@"d:\media\photos\me.png");
        Bitmap img = bmp as Bitmap;
        
        // copy out the bytes using interop
        BitmapData data = img.LockBits(new Rectangle(0, 0, img.Width, img.Height), ImageLockMode.ReadOnly, System.Drawing.Imaging.PixelFormat.Format32bppArgb);
        int bytes = Math.Abs(data.Stride * bmp.Height);
        byte[] rgbValues = new byte[bytes];
        System.Runtime.InteropServices.Marshal.Copy(data.Scan0, rgbValues, 0, bytes);
        img.UnlockBits(data);

        for (int y = 0; y < bmp.Height; y++)
        {
            for (int x = 0; x < bmp.Width; x++)
            {
                byte b = rgbValues[y * data.Stride + x * 4];
                rgbValues[y * data.Stride + x * 4] = rgbValues[y * data.Stride + x * 4 + 2];
                rgbValues[y * data.Stride + x * 4 + 2] = b;
            }
        }

        await _context.TexImage2DAsync<byte>(Texture2DType.TEXTURE_2D, 0, Blazor.Extensions.Canvas.WebGL.PixelFormat.RGBA, bmp.Width, bmp.Height, 0, Blazor.Extensions.Canvas.WebGL.PixelFormat.RGBA, PixelType.UNSIGNED_BYTE, rgbValues);
        @* await _context.GenerateMipmapAsync(TextureType.TEXTURE_2D); *@
        await _context.TexParameterAsync(TextureType.TEXTURE_2D, TextureParameter.TEXTURE_WRAP_S, (int)TextureParameterValue.CLAMP_TO_EDGE);
        await _context.TexParameterAsync(TextureType.TEXTURE_2D, TextureParameter.TEXTURE_WRAP_T, (int)TextureParameterValue.CLAMP_TO_EDGE);
        await _context.TexParameterAsync(TextureType.TEXTURE_2D, TextureParameter.TEXTURE_MIN_FILTER, (int)TextureParameterValue.LINEAR);

        return texture;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _context = await _canvasReference.CreateWebGLAsync();

        if (firstRender)
        {
            shaderProgram = await InitShaderProgram();
            if (textureMapping)
            {
                textureBuffer = await InitTextureBuffer();
            }
            else
            {
                colourBuffer = await InitColourBuffer();
            }
            positionBuffer = await InitPositionBuffer();
            indexBuffer = await InitIndexBuffer();
            normalBuffer = await InitNormalBuffer();
            if (textureMapping)
            {
                texture = await LoadTexture();
            }
            vertexPosition = (uint)await _context.GetAttribLocationAsync(shaderProgram, "aVertexPosition");
            if (!textureMapping)
            {
                vertexColour = (uint)await _context.GetAttribLocationAsync(shaderProgram, "aVertexColour");
            }
            vertexNormal = (uint)await _context.GetAttribLocationAsync(shaderProgram, "aVertexNormal");
            if (textureMapping)
            {
                textureCoord = (uint)await _context.GetAttribLocationAsync(shaderProgram, "aTextureCoord");
            }
            projectionMatrixLocation = await _context.GetUniformLocationAsync(shaderProgram, "uProjectionMatrix");
            modelViewMatrixLocation = await _context.GetUniformLocationAsync(shaderProgram, "uModelViewMatrix");
            normalMatrixLocation = await _context.GetUniformLocationAsync(shaderProgram, "uNormalMatrix");
            if (textureMapping)
            {
                samplerLocation = await _context.GetUniformLocationAsync(shaderProgram, "uSampler");
            }
        }

        await _context.ClearColorAsync(0, 0, 0, 1);
        await _context.ClearDepthAsync(1.0f);

        await _context.BeginBatchAsync();
        await _context.EnableAsync(EnableCap.DEPTH_TEST);
        await _context.DepthFuncAsync(CompareFunction.LEQUAL);
        await _context.ClearAsync(BufferBits.COLOR_BUFFER_BIT | BufferBits.DEPTH_BUFFER_BIT);

        var fieldOfView = 45.0f * (float)Math.PI / 180.0f;
        float aspect = (float)_canvasReference.Width / (float)_canvasReference.Height;
        var zNear = 0.1f;
        var zFar = 100.0f;

        var projectionMatrix = Matrix.Perspective(fieldOfView, aspect, zNear, zFar);

        var modelViewMatrix = new Matrix()
            .Translate(-0.0f, 0.0f, -6.0f)
            .Rotate(cubeRotation, 0.0f, 0.0f, 1.0f)
            .Rotate(cubeRotation * 0.7f, 0.0f, 1.0f, 0.0f);

        var normalMatrix = new Matrix().Invert(modelViewMatrix).Transpose();
        
        await _context.BindBufferAsync(BufferType.ARRAY_BUFFER, positionBuffer);
        await _context.VertexAttribPointerAsync(vertexPosition, 3, DataType.FLOAT, false, 0, 0);
        await _context.EnableVertexAttribArrayAsync(vertexPosition);

        if (textureMapping)
        {
            await _context.BindBufferAsync(BufferType.ARRAY_BUFFER, textureBuffer);
            await _context.VertexAttribPointerAsync(textureCoord, 2, DataType.FLOAT, false, 0, 0);
            await _context.EnableVertexAttribArrayAsync(textureCoord);
        }
        else
        {
            await _context.BindBufferAsync(BufferType.ARRAY_BUFFER, colourBuffer);
            await _context.VertexAttribPointerAsync(vertexColour, 4, DataType.FLOAT, false, 0, 0);
            await _context.EnableVertexAttribArrayAsync(vertexColour);
        }

        await _context.BindBufferAsync(BufferType.ARRAY_BUFFER, normalBuffer);
        await _context.VertexAttribPointerAsync(vertexNormal, 3, DataType.FLOAT, false, 0, 0);
        await _context.EnableVertexAttribArrayAsync(vertexNormal);

        await _context.BindBufferAsync(BufferType.ELEMENT_ARRAY_BUFFER, indexBuffer);

        await _context.UseProgramAsync(shaderProgram);

        await _context.UniformMatrixAsync(projectionMatrixLocation, false, projectionMatrix.Values);
        await _context.UniformMatrixAsync(modelViewMatrixLocation, false, modelViewMatrix.Values);
        await _context.UniformMatrixAsync(normalMatrixLocation, false, normalMatrix.Values);

        if (textureMapping)
        {
            await _context.ActiveTextureAsync(Texture.TEXTURE0);
            await _context.BindTextureAsync(TextureType.TEXTURE_2D, texture);
            await _context.UniformAsync(samplerLocation, 0);
        }

        await _context.DrawElementsAsync(Primitive.TRIANGLES, 36, DataType.UNSIGNED_SHORT, 0);

        await _context.EndBatchAsync();

        // force simple animation by updating rotation and triggering state change
        cubeRotation += 0.01f;

        // obtain the frame time
        frameTime = (DateTime.Now - lastFrame).Milliseconds;
        lastFrame = DateTime.Now;

        StateHasChanged();
    }
}